{"version":3,"sources":["types/TimelineDate.ts","constant.ts","components/ui/FieldCharacteristic/FieldCharacteristic.tsx","hooks/useTypedSelector.ts","components/Characteristics/Characteristics.tsx","hooks/useTypedDispatch.ts","generator/namegen.ts","storage/actions/treeAction.ts","types/Id.ts","generator/generate.ts","storage/reducers/characterReducer.ts","storage/reducers/treeReducer.ts","storage/store.ts","components/TreeDrawer/TreeDrawer.tsx","components/TreeEditor/TreeEditor.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["TimelineDate","day","month","year","startTimelineDay","startTimelineMonth","startTimelineYear","this","td","str","arr","split","length","Number","ShowString","props","string","ReturnInput","defaultValue","defaultVal","onChange","handleChange","FieldCharacteristic","className","fieldName","isEditing","showString","useTypedSelector","useSelector","Characteristics","characters","state","dispatch","useDispatch","useState","setisEditing","Text","setText","charId","person","_setPerson","setPerson","type","payload","character","find","v","id","valueOf","style","display","onClick","width","height","e","name","target","value","surname","patronymic","obj","Object","assign","birth","changeDateString","returnDateAsString","death","Wrappers","GroupTypes","symbolMap","s","V","c","B","C","i","m","M","D","d","Group","wrappers","set","Literal","Random","push","Sequence","a","g","pop","reverser","Reverser","capitalizer","Capitalizer","add","chr","GroupSymbol","symbol","symbols","key","GroupLiteral","literal","NameGenerator","pattern","collapse_triples","generators","last","stack","top","patternStr","Error","produce","wrap","Collapser","total","forEach","combinations","final","min","max","rand","toString","curr","rnd","Math","floor","generator","reverse","join","toUpperCase","substr","toLowerCase","out","cnt","pch","mch","NameGen","TreeActionTypes","Id","dynastyid","characterid","CharactersArray","memberCount","main","secondary","Map","values","update","get","delete","DEFAULT_PARAMS","DYNASTY_NAME","undefined","AVRAGE_FIRTILITY_AGE","AVRAGE_LIFESPAN","YEAR_DIFERENCE_LIMIT","LIVESPAN_DEFFERENCE_KOEF","SECANDARY_DYNASTIES_LIMIT","MAX_RANDOM_NUM","DEBUG","Generator","nameTemplate","seed","random","options","foundingDate","idCounter","nameGen","dynNameGen","dynasty","dynastys","links","_pseudorandom","Array","t","imul","ret","console","log","_awaitedCildCount","isMale","Boolean","_randint","findIndex","childCount","parentBirth","youngDate","reduce","prev","peerBirth","array","_generateDynasty","idx","dyn","from","to","role","prefix","args","founder","IPersonFactory","_createDeathTimelineDate","_logChararacterData","_randomFromArray","marriege","_findMerried","_getSecondaryDynasty","wifu","_createPeerTimlineDate","child","_createChildTimelineDate","count","index","all","char","gena","charDefaultState","treeDefaultState","node","relations","store","configureStore","reducer","tree","action","CREATE_LINK","CREATE_NODE","REMOVE_LINK","REMOVE_NODE","clear","generateDynasty","TreeDrawer","dispach","canvasRef","useRef","useEffect","ctx","current","getContext","fillStyle","fillRect","canvas","drawNode","x","birth_date","object","ref","round","TreeEditor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4b73069.chunk.js","sourcesContent":["import { daysInYear } from \"../constant\";\nimport { daysInMonth } from \"../constant\";\n\ninterface ITimelineDate{\n  day: number,\n  month: number,\n  year: number,\n  startTimelineDay: number,\n  startTimelineMonth: number,\n  startTimelineYear: number\n}\n\nclass TimelineDate implements ITimelineDate {\n  day;\n  month;\n  year;\n  startTimelineDay;\n  startTimelineMonth;\n  startTimelineYear;\n\n  constructor(\n    day: number,\n    month: number,\n    year: number,\n    startTimelineDay: number,\n    startTimelineMonth: number,\n    startTimelineYear: number\n  ) {\n    this.day = day;\n    this.month = month;\n    this.year = year;\n    this.startTimelineDay = startTimelineDay;\n    this.startTimelineMonth = startTimelineMonth;\n    this.startTimelineYear = startTimelineYear;\n  }\n\n  // возвращает время в днях с начала timeline\n  static timeInDaysFromStart(td:TimelineDate | ITimelineDate,): number {\n    let years = td.year - td.startTimelineYear;\n    let months = td.month - td.startTimelineMonth;\n    let days = td.day - td.startTimelineDay;\n    return years * daysInYear * daysInMonth + months * daysInMonth + days;\n  }\n\n  // изменяет дату начала таймлайна(если пользователь изменил дату, например)\n  static changeStartTimelineDate(td:TimelineDate | ITimelineDate,day: number, month: number, year: number) {\n    td.startTimelineDay = day;\n    td.startTimelineMonth = month;\n    td.startTimelineYear = year;\n  }\n\n  // изменяет дату(если пользователь изменил дату)\n  static changeDate(td:TimelineDate | ITimelineDate,day: number, month: number, year: number) {\n    td.day = day;\n    td.month = month;\n    td.year = year;\n  }\n\n  //изменяет дату, на вход подаётся строка day.month.year\n  static changeDateString(td:TimelineDate | ITimelineDate,str: string) {\n    let arr = str.split(\".\");\n    if (arr.length === 1) {\n      td.day = Number(arr[0]);\n    } else if (arr.length === 2) {\n      td.day = Number(arr[0]);\n      td.month = Number(arr[1]);\n    } else {\n      td.day = Number(arr[0]);\n      td.month = Number(arr[1]);\n      td.year = Number(arr[2]);\n    }\n  }\n  // возващает дату как строку\n  static returnDateAsString(td:TimelineDate | ITimelineDate): string {\n    return `${td.day}.${td.month}.${td.year}`;\n  }\n}\n\nexport default TimelineDate;\n","export const daysInYear = 365;\nexport const daysInMonth = 30;","import React from \"react\";\nimport { OnChangeFunction } from \"../../../types/OnChangeFunction\";\n\n// возвращает строку, почти бесполезно\nfunction ShowString(props: { string: string }) {\n    return <h4>{props.string}</h4>;\n}\n\n// возвращает элемент input, на вход подаются дефолтное значение и функция обработки изменения значения поля ввода\nfunction ReturnInput(props: {\ndefaultVal: string;\nhandleChange: OnChangeFunction;\n}) {\nreturn (\n    <input\n    defaultValue={props.defaultVal}\n    onChange={props.handleChange}\n    ></input>\n);\n}\nexport interface IFieldCharacteristicProps {\n    fieldName: string; //Название поля\n    isEditing: boolean;\n    handleChange: OnChangeFunction; // Функция обработки изменения поля\n    showString: string; // Значение поля\n};\n\n// Компонент, который может быть полем ввода или заголовком в зависимости от isEditing]\nconst FieldCharacteristic: React.FC<IFieldCharacteristicProps> = (props) => {\n    return (\n        <div className=\"divCharacteristics\">\n    <ShowString string={props.fieldName} />\n    {props.isEditing ? (\n        <ReturnInput\n        defaultVal={props.showString}\n        handleChange={props.handleChange}\n        />\n    ) : (\n        <ShowString string={props.showString} />\n    )}\n    </div>\n    );\n}\n\nexport default FieldCharacteristic;","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\nimport { RootState } from \"../storage/store\";\n\nexport const useTypedSelector:TypedUseSelectorHook<RootState> = useSelector;","import { useState } from \"react\";\nimport TimelineDate from \"../../types/TimelineDate\";\nimport \"./Characteristics.css\";\nimport IPerson from \"../../types/interfaces/IPerson\";\nimport FieldCharacteristic from \"../ui/FieldCharacteristic/FieldCharacteristic\";\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\nimport { useTypedDispatch } from \"../../hooks/useTypedDispatch\";\n\nfunction Characteristics() {\n  // начальную инициализацию нужно изменить при загрузке персонажа\n  const characters = useTypedSelector(state => state.characters)\n  const dispatch = useTypedDispatch()\n\n  const [isEditing, setisEditing] = useState(false);\n  const [Text, setText] = useState(\"Edit\");\n  //Move id to redux storage\n  // eslint-disable-next-line\n  const [charId, setCharId] = useState<number>(0);\n  const [person, _setPerson] = useState<IPerson>();\n  const setPerson = (person: IPerson) => {\n    _setPerson(person);\n    dispatch({type:\"UpdateCharacter\",payload:person});\n  }\n\n  if(!characters) return (<h2>NOT INISALIZED</h2>)\n  const character = characters.find(v => v.id.valueOf() === charId)\n  if (!character) return (<div >\n    <h2>CHARACTER UNFOUND</h2>\n    <button onClick={()=>{\n          dispatch({type:\"GenearateDynasty\"})\n        }}>GENERATE DYNASTY</button>\n    </div>)\n  if(person !== character) setPerson(character);\n\n  if (!person) return (<h2>PERSON IS NULL</h2>)\n  function handleClick() {\n    if (isEditing) {\n      setisEditing(false);\n      setText(\"Edit\");\n    } else {\n      setisEditing(true);\n      setText(\"Save\");\n    }\n  }\n\n  return (\n    <div style={{ display: \"grid\" }}>\n      <button onClick={handleClick} style={{ width: \"100%\", height: \"2rem\" }}>\n        {Text}\n      </button>\n      <FieldCharacteristic\n        fieldName={\"Name: \"}\n        isEditing={isEditing}\n        handleChange={(e) => {\n          setPerson({ ...person, name: e.target.value });\n        }}\n        showString={person.name}\n      />\n      <FieldCharacteristic\n        fieldName={\"Surname: \"}\n        isEditing={isEditing}\n        handleChange={(e) => {\n          setPerson({ ...person, surname: e.target.value });\n        }}\n        showString={person.surname}\n      />\n      <FieldCharacteristic\n        fieldName={\"Patronymic: \"}\n        isEditing={isEditing}\n        handleChange={(e) => {\n          setPerson({ ...person, patronymic: e.target.value });\n        }}\n        showString={person.patronymic}\n      />\n      <FieldCharacteristic\n        fieldName={\"Birth Date: \"}\n        isEditing={isEditing}\n        handleChange={(e) => {\n          let obj = new TimelineDate(0, 0, 0, 0, 0, 0);\n          Object.assign(obj, person.birth);\n          TimelineDate.changeDateString(obj,e.target.value);\n          setPerson({ ...person, birth: obj });\n        }}\n        showString={TimelineDate.returnDateAsString(person.birth)}\n      />\n      <FieldCharacteristic\n        fieldName={\"Death Date: \"}\n        isEditing={isEditing}\n        handleChange={(e) => {\n          if (e.target.value.length > 0) {\n            let obj = new TimelineDate(0, 0, 0, 0, 0, 0);\n            if (typeof person.death == \"object\") {\n              Object.assign(obj, person.death);\n            }\n            TimelineDate.changeDateString(obj,e.target.value);\n            setPerson({ ...person, death: obj });\n          } else {\n            setPerson({ ...person, death: null });\n          }\n        }}\n        showString={\n          person.death ? TimelineDate.returnDateAsString(person.death) : \"not dead yet\"\n        }\n      />\n    </div>\n  );\n}\n\nexport default Characteristics;\n","import { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../storage/store\";\nexport const useTypedDispatch = () => useDispatch<AppDispatch>();","/**\n *\n * @file A fantasy name generator library.\n * @version 1.0.1\n * @license Public Domain\n * @author Edgar Alvarado (pe1uca)\n *\n * This library is designed after the RinkWorks Fantasy Name NameGenerator.\n * @see http://www.rinkworks.com/namegen/\n *\n * @example\n * import NameGen from \"./utils/namegen\";\n * let generator = new NameGen.NameGenerator(\"sV'i\");\n * generator.toString();  // Returns a new name each call with toString()\n * // => \"entheu'loaf\"\n *\n * ## Pattern Syntax\n *\n *   The toString() function creates a name generator based on an input\n * pattern. The letters s, v, V, c, B, C, i, m, M, D, and d represent\n * different types of random replacements. Everything else is produced\n * literally.\n *\n *   s - generic syllable\n *   v - vowel\n *   V - vowel or vowel combination\n *   c - consonant\n *   B - consonant or consonant combination suitable for beginning a word\n *   C - consonant or consonant combination suitable anywhere in a word\n *   i - insult\n *   m - mushy name\n *   M - mushy name ending\n *   D - consonant suited for a stupid person's name\n *   d - syllable suited for a stupid person's name (begins with a vowel)\n *\n *   All characters between parenthesis () are produced literally. For\n * example, the pattern \"s(dim)\", produces a random generic syllable\n * followed by \"dim\".\n *\n *   Characters between angle brackets <> produce patterns from the table\n * above. Imagine the entire pattern is wrapped in one of these.\n *\n *   In both types of groupings, a vertical bar | denotes a random\n * choice. Empty groups are allowed. For example, \"(foo|bar)\" produces\n * either \"foo\" or \"bar\". The pattern \"<c|v|>\" produces a constant,\n * vowel, or nothing at all.\n *\n *   An exclamation point ! means to capitalize the component that\n * follows it. For example, \"!(foo)\" will produce \"Foo\" and \"v!s\" will\n * produce a lowercase vowel followed by a capitalized syllable, like\n * \"eRod\".\n *\n *   A tilde ~ means to reverse the letters of the component that\n * follows it. For example, \"~(foo)\" will produce \"oof\". To reverse an\n * entire template, wrap it in brackets. For example, to reverse\n * \"sV'i\" as a whole use \"~<sV'i>\". The template \"~sV'i\" will only\n * reverse the initial syllable.\n */\n\nnamespace NameGen {\n\n\t// Middle Earth\n\texport const MIDDLE_EARTH = \"(bil|bal|ban|hil|ham|hal|hol|hob|wil|me|or|ol|od|gor|for|fos|tol|ar|fin|ere|leo|vi|bi|bren|thor)(|go|orbis|apol|adur|mos|ri|i|na|ole|n)(|tur|axia|and|bo|gil|bin|bras|las|mac|grim|wise|l|lo|fo|co|ra|via|da|ne|ta|y|wen|thiel|phin|dir|dor|tor|rod|on|rdo|dis)\";\n\n\t// Japanese Names (Constrained)\n\texport const JAPANESE_NAMES_CONSTRAINED = \"(aka|aki|bashi|gawa|kawa|furu|fuku|fuji|hana|hara|haru|hashi|hira|hon|hoshi|ichi|iwa|kami|kawa|ki|kita|kuchi|kuro|marui|matsu|miya|mori|moto|mura|nabe|naka|nishi|no|da|ta|o|oo|oka|saka|saki|sawa|shita|shima|i|suzu|taka|take|to|toku|toyo|ue|wa|wara|wata|yama|yoshi|kei|ko|zawa|zen|sen|ao|gin|kin|ken|shiro|zaki|yuki|asa)(||||||||||bashi|gawa|kawa|furu|fuku|fuji|hana|hara|haru|hashi|hira|hon|hoshi|chi|wa|ka|kami|kawa|ki|kita|kuchi|kuro|marui|matsu|miya|mori|moto|mura|nabe|naka|nishi|no|da|ta|o|oo|oka|saka|saki|sawa|shita|shima|suzu|taka|take|to|toku|toyo|ue|wa|wara|wata|yama|yoshi|kei|ko|zawa|zen|sen|ao|gin|kin|ken|shiro|zaki|yuki|sa)\";\n\n\t// Japanese Names (Diverse)\n\texport const JAPANESE_NAMES_DIVERSE = \"(a|i|u|e|o|||||)(ka|ki|ki|ku|ku|ke|ke|ko|ko|sa|sa|sa|shi|shi|shi|su|su|se|so|ta|ta|chi|chi|tsu|te|to|na|ni|ni|nu|nu|ne|no|no|ha|hi|fu|fu|he|ho|ma|ma|ma|mi|mi|mi|mu|mu|mu|mu|me|mo|mo|mo|ya|yu|yu|yu|yo|ra|ra|ra|ri|ru|ru|ru|re|ro|ro|ro|wa|wa|wa|wa|wo|wo)(ka|ki|ki|ku|ku|ke|ke|ko|ko|sa|sa|sa|shi|shi|shi|su|su|se|so|ta|ta|chi|chi|tsu|te|to|na|ni|ni|nu|nu|ne|no|no|ha|hi|fu|fu|he|ho|ma|ma|ma|mi|mi|mi|mu|mu|mu|mu|me|mo|mo|mo|ya|yu|yu|yu|yo|ra|ra|ra|ri|ru|ru|ru|re|ro|ro|ro|wa|wa|wa|wa|wo|wo)(|(ka|ki|ki|ku|ku|ke|ke|ko|ko|sa|sa|sa|shi|shi|shi|su|su|se|so|ta|ta|chi|chi|tsu|te|to|na|ni|ni|nu|nu|ne|no|no|ha|hi|fu|fu|he|ho|ma|ma|ma|mi|mi|mi|mu|mu|mu|mu|me|mo|mo|mo|ya|yu|yu|yu|yo|ra|ra|ra|ri|ru|ru|ru|re|ro|ro|ro|wa|wa|wa|wa|wo|wo)|(ka|ki|ki|ku|ku|ke|ke|ko|ko|sa|sa|sa|shi|shi|shi|su|su|se|so|ta|ta|chi|chi|tsu|te|to|na|ni|ni|nu|nu|ne|no|no|ha|hi|fu|fu|he|ho|ma|ma|ma|mi|mi|mi|mu|mu|mu|mu|me|mo|mo|mo|ya|yu|yu|yu|yo|ra|ra|ra|ri|ru|ru|ru|re|ro|ro|ro|wa|wa|wa|wa|wo|wo)(|(ka|ki|ki|ku|ku|ke|ke|ko|ko|sa|sa|sa|shi|shi|shi|su|su|se|so|ta|ta|chi|chi|tsu|te|to|na|ni|ni|nu|nu|ne|no|no|ha|hi|fu|fu|he|ho|ma|ma|ma|mi|mi|mi|mu|mu|mu|mu|me|mo|mo|mo|ya|yu|yu|yu|yo|ra|ra|ra|ri|ru|ru|ru|re|ro|ro|ro|wa|wa|wa|wa|wo|wo)))(|||n)\";\n\n\t// Chinese Names\n\texport const CHINESE_NAMES = \"(zh|x|q|sh|h)(ao|ian|uo|ou|ia)(|(l|w|c|p|b|m)(ao|ian|uo|ou|ia)(|n)|-(l|w|c|p|b|m)(ao|ian|uo|ou|ia)(|(d|j|q|l)(a|ai|iu|ao|i)))\";\n\n\t// Greek Names\n\texport const GREEK_NAMES = \"<s<v|V>(tia)|s<v|V>(os)|B<v|V>c(ios)|B<v|V><c|C>v(ios|os)>\";\n\n\t// Hawaiian Names (1)\n\texport const HAWAIIAN_NAMES_1 = \"((h|k|l|m|n|p|w|')|)(a|e|i|o|u)((h|k|l|m|n|p|w|')|)(a|e|i|o|u)(((h|k|l|m|n|p|w|')|)(a|e|i|o|u)|)(((h|k|l|m|n|p|w|')|)(a|e|i|o|u)|)(((h|k|l|m|n|p|w|')|)(a|e|i|o|u)|)(((h|k|l|m|n|p|w|')|)(a|e|i|o|u)|)\";\n\n\t// Hawaiian Names (2)\n\texport const HAWAIIAN_NAMES_2 = \"((h|k|l|m|n|p|w|)(a|e|i|o|u|a'|e'|i'|o'|u'|ae|ai|ao|au|oi|ou|eu|ei)(k|l|m|n|p|)|)(h|k|l|m|n|p|w|)(a|e|i|o|u|a'|e'|i'|o'|u'|ae|ai|ao|au|oi|ou|eu|ei)(k|l|m|n|p|)\";\n\n\t// Old Latin Place Names\n\texport const OLD_LATIN_PLACE_NAMES = \"sv(nia|lia|cia|sia)\";\n\n\t// Dragons (Pern)\n\texport const DRAGONS_PERN = \"<<s|ss>|<VC|vC|B|BVs|Vs>><v|V|v|<v(l|n|r)|vc>>(th)\";\n\n\t// Dragon Riders\n\texport const DRAGON_RIDERS = \"c'<s|cvc>\";\n\n\t// Pokemon\n\texport const POKEMON = \"<i|s>v(mon|chu|zard|rtle)\";\n\n\t// Fantasy (Vowels, R, etc.)\n\texport const FANTASY_VOWELS_R = \"(|(<B>|s|h|ty|ph|r))(i|ae|ya|ae|eu|ia|i|eo|ai|a)(lo|la|sri|da|dai|the|sty|lae|due|li|lly|ri|na|ral|sur|rith)(|(su|nu|sti|llo|ria|))(|(n|ra|p|m|lis|cal|deu|dil|suir|phos|ru|dru|rin|raap|rgue))\";\n\n\t// Fantasy (S, A, etc.)\n\texport const FANTASY_S_A = \"(cham|chan|jisk|lis|frich|isk|lass|mind|sond|sund|ass|chad|lirt|und|mar|lis|il|<BVC>)(jask|ast|ista|adar|irra|im|ossa|assa|osia|ilsa|<vCv>)(|(an|ya|la|sta|sda|sya|st|nya))\";\n\n\t// Fantasy (H, L, etc.)\n\texport const FANTASY_H_L = \"(ch|ch't|sh|cal|val|ell|har|shar|shal|rel|laen|ral|jh't|alr|ch|ch't|av)(|(is|al|ow|ish|ul|el|ar|iel))(aren|aeish|aith|even|adur|ulash|alith|atar|aia|erin|aera|ael|ira|iel|ahur|ishul)\";\n\n\t// Fantasy (N, L, etc.)\n\texport const FANTASY_N_L = \"(ethr|qil|mal|er|eal|far|fil|fir|ing|ind|il|lam|quel|quar|quan|qar|pal|mal|yar|um|ard|enn|ey)(|(<vc>|on|us|un|ar|as|en|ir|ur|at|ol|al|an))(uard|wen|arn|on|il|ie|on|iel|rion|rian|an|ista|rion|rian|cil|mol|yon)\";\n\n\t// Fantasy (K, N, etc.)\n\texport const FANTASY_K_N = \"(taith|kach|chak|kank|kjar|rak|kan|kaj|tach|rskal|kjol|jok|jor|jad|kot|kon|knir|kror|kol|tul|rhaok|rhak|krol|jan|kag|ryr)(<vc>|in|or|an|ar|och|un|mar|yk|ja|arn|ir|ros|ror)(|(mund|ard|arn|karr|chim|kos|rir|arl|kni|var|an|in|ir|a|i|as))\";\n\n\t// Fantasy (J, G, Z, etc.)\n\texport const FANTASY_J_G_Z = \"(aj|ch|etz|etzl|tz|kal|gahn|kab|aj|izl|ts|jaj|lan|kach|chaj|qaq|jol|ix|az|biq|nam)(|(<vc>|aw|al|yes|il|ay|en|tom||oj|im|ol|aj|an|as))(aj|am|al|aqa|ende|elja|ich|ak|ix|in|ak|al|il|ek|ij|os|al|im)\";\n\n\t// Fantasy (K, J, Y, etc.)\n\texport const FANTASY_K_J_Y = \"(yi|shu|a|be|na|chi|cha|cho|ksa|yi|shu)(th|dd|jj|sh|rr|mk|n|rk|y|jj|th)(us|ash|eni|akra|nai|ral|ect|are|el|urru|aja|al|uz|ict|arja|ichi|ural|iru|aki|esh)\";\n\n\t// Fantasy (S, E, etc.)\n\texport const FANTASY_S_E = \"(syth|sith|srr|sen|yth|ssen|then|fen|ssth|kel|syn|est|bess|inth|nen|tin|cor|sv|iss|ith|sen|slar|ssil|sthen|svis|s|ss|s|ss)(|(tys|eus|yn|of|es|en|ath|elth|al|ell|ka|ith|yrrl|is|isl|yr|ast|iy))(us|yn|en|ens|ra|rg|le|en|ith|ast|zon|in|yn|ys)\";\n\n\ttype symbolMapShorts = 's' | 'v' | 'V' | 'c' | 'B' | 'C' | 'i' | 'm' | 'M' | 'D' | 'd' \n\tlet symbolMap = {\n\t\ts: ['ach', 'ack', 'ad', 'age', 'ald', 'ale', 'an', 'ang', 'ar', 'ard',\n\t\t\t'as', 'ash', 'at', 'ath', 'augh', 'aw', 'ban', 'bel', 'bur', 'cer',\n\t\t\t'cha', 'che', 'dan', 'dar', 'del', 'den', 'dra', 'dyn', 'ech', 'eld',\n\t\t\t'elm', 'em', 'en', 'end', 'eng', 'enth', 'er', 'ess', 'est', 'et',\n\t\t\t'gar', 'gha', 'hat', 'hin', 'hon', 'ia', 'ight', 'ild', 'im', 'ina',\n\t\t\t'ine', 'ing', 'ir', 'is', 'iss', 'it', 'kal', 'kel', 'kim', 'kin',\n\t\t\t'ler', 'lor', 'lye', 'mor', 'mos', 'nal', 'ny', 'nys', 'old', 'om',\n\t\t\t'on', 'or', 'orm', 'os', 'ough', 'per', 'pol', 'qua', 'que', 'rad',\n\t\t\t'rak', 'ran', 'ray', 'ril', 'ris', 'rod', 'roth', 'ryn', 'sam',\n\t\t\t'say', 'ser', 'shy', 'skel', 'sul', 'tai', 'tan', 'tas', 'ther',\n\t\t\t'tia', 'tin', 'ton', 'tor', 'tur', 'um', 'und', 'unt', 'urn', 'usk',\n\t\t\t'ust', 'ver', 'ves', 'vor', 'war', 'wor', 'yer'],\n\t\tv: ['a', 'e', 'i', 'o', 'u', 'y'],\n\t\tV: ['a', 'e', 'i', 'o', 'u', 'y', 'ae', 'ai', 'au', 'ay', 'ea', 'ee',\n\t\t\t'ei', 'eu', 'ey', 'ia', 'ie', 'oe', 'oi', 'oo', 'ou', 'ui'],\n\t\tc: ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r',\n\t\t\t's', 't', 'v', 'w', 'x', 'y', 'z'],\n\t\tB: ['b', 'bl', 'br', 'c', 'ch', 'chr', 'cl', 'cr', 'd', 'dr', 'f', 'g',\n\t\t\t'h', 'j', 'k', 'l', 'll', 'm', 'n', 'p', 'ph', 'qu', 'r', 'rh', 's',\n\t\t\t'sch', 'sh', 'sl', 'sm', 'sn', 'st', 'str', 'sw', 't', 'th', 'thr',\n\t\t\t'tr', 'v', 'w', 'wh', 'y', 'z', 'zh'],\n\t\tC: ['b', 'c', 'ch', 'ck', 'd', 'f', 'g', 'gh', 'h', 'k', 'l', 'ld', 'll',\n\t\t\t'lt', 'm', 'n', 'nd', 'nn', 'nt', 'p', 'ph', 'q', 'r', 'rd', 'rr',\n\t\t\t'rt', 's', 'sh', 'ss', 'st', 't', 'th', 'v', 'w', 'y', 'z'],\n\t\ti: ['air', 'ankle', 'ball', 'beef', 'bone', 'bum', 'bumble', 'bump',\n\t\t\t'cheese', 'clod', 'clot', 'clown', 'corn', 'dip', 'dolt', 'doof',\n\t\t\t'dork', 'dumb', 'face', 'finger', 'foot', 'fumble', 'goof',\n\t\t\t'grumble', 'head', 'knock', 'knocker', 'knuckle', 'loaf', 'lump',\n\t\t\t'lunk', 'meat', 'muck', 'munch', 'nit', 'numb', 'pin', 'puff',\n\t\t\t'skull', 'snark', 'sneeze', 'thimble', 'twerp', 'twit', 'wad',\n\t\t\t'wimp', 'wipe'],\n\t\tm: ['baby', 'booble', 'bunker', 'cuddle', 'cuddly', 'cutie', 'doodle',\n\t\t\t'foofie', 'gooble', 'honey', 'kissie', 'lover', 'lovey', 'moofie',\n\t\t\t'mooglie', 'moopie', 'moopsie', 'nookum', 'poochie', 'poof',\n\t\t\t'poofie', 'pookie', 'schmoopie', 'schnoogle', 'schnookie',\n\t\t\t'schnookum', 'smooch', 'smoochie', 'smoosh', 'snoogle', 'snoogy',\n\t\t\t'snookie', 'snookum', 'snuggy', 'sweetie', 'woogle', 'woogy',\n\t\t\t'wookie', 'wookum', 'wuddle', 'wuddly', 'wuggy', 'wunny'],\n\t\tM: ['boo', 'bunch', 'bunny', 'cake', 'cakes', 'cute', 'darling',\n\t\t\t'dumpling', 'dumplings', 'face', 'foof', 'goo', 'head', 'kin',\n\t\t\t'kins', 'lips', 'love', 'mush', 'pie', 'poo', 'pooh', 'pook', 'pums'],\n\t\tD: ['b', 'bl', 'br', 'cl', 'd', 'f', 'fl', 'fr', 'g', 'gh', 'gl', 'gr',\n\t\t\t'h', 'j', 'k', 'kl', 'm', 'n', 'p', 'th', 'w'],\n\t\td: ['elch', 'idiot', 'ob', 'og', 'ok', 'olph', 'olt', 'omph', 'ong',\n\t\t\t'onk', 'oo', 'oob', 'oof', 'oog', 'ook', 'ooz', 'org', 'ork', 'orm',\n\t\t\t'oron', 'ub', 'uck', 'ug', 'ulf', 'ult', 'um', 'umb', 'ump', 'umph',\n\t\t\t'un', 'unb', 'ung', 'unk', 'unph', 'unt', 'uzz']\n\t};\n\n\tenum Wrappers {\n\t\tcapitalizer,\n\t\treverser\n\t}\n\n\tenum GroupTypes {\n\t\tsymbol,\n\t\tliteral\n\t}\n\n\tclass Group {\n\t\tprivate wrappers: Wrappers[] = [];\n\t\tprivate set: NameGenerator[] = [];\n\n\t\tpublic type: GroupTypes;\n\n\t\tconstructor(type: GroupTypes) {\n\t\t\tthis.type = type;\n\t\t}\n\n\t\tpublic produce(): NameGenerator {\n\t\t\tswitch (this.set.length) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn new Literal('');\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.set[0];\n\t\t\t\tdefault:\n\t\t\t\t\treturn new Random(this.set);\n\t\t\t}\n\t\t}\n\n\t\tpublic split(): void {\n\t\t\tif (this.set.length === 0) {\n\t\t\t\tthis.set.push(new Sequence([]));\n\t\t\t}\n\t\t\tthis.set.push(new Sequence([]));\n\t\t}\n\n\t\tpublic wrap(type: Wrappers): void {\n\t\t\tthis.wrappers.push(type);\n\t\t}\n\n\t\tpublic add(a: NameGenerator | string): void {\n\t\t\tif (typeof a !== 'string') {\n\t\t\t\tlet g = a;\n\t\t\t\twhile (this.wrappers.length > 0) {\n\t\t\t\t\tswitch (this.wrappers.pop()) {\n\t\t\t\t\t\tcase Wrappers.reverser:\n\t\t\t\t\t\t\tg = new Reverser(g);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Wrappers.capitalizer:\n\t\t\t\t\t\t\tg = new Capitalizer(g);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.set.length === 0) {\n\t\t\t\t\tthis.set.push(new Sequence([]));\n\t\t\t\t}\n\t\t\t\tthis.set[this.set.length - 1].add(g);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet chr = a;\n\t\t\tlet g = new Random([]);\n\t\t\tg.add(new Literal(chr));\n\t\t\tthis.add(g);\n\t\t}\n\t}\n\n\tclass GroupSymbol extends Group {\n\t\tconstructor() {\n\t\t\tsuper(GroupTypes.symbol);\n\t\t}\n\n\t\tpublic add(a: symbolMapShorts): void {\n\t\t\tlet g = new Random([]);\n\t\t\tlet symbols = symbolMap[a];\n\t\t\tif (symbols) {\n\t\t\t\tfor (const key in symbols) {\n\t\t\t\t\tg.add(new Literal(symbols[key]));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tg.add(new Literal(a));\n\t\t\t}\n\t\t\tsuper.add(g);\n\t\t}\n\t}\n\n\tclass GroupLiteral extends Group {\n\t\tconstructor() {\n\t\t\tsuper(GroupTypes.literal);\n\t\t}\n\t}\n\n\texport class NameGenerator {\n\n\t\tprotected generators: NameGenerator[] = [];\n\n\t\tconstructor(pattern: string | NameGenerator[] | null = null, collapse_triples: boolean = true) {\n\t\t\tif (typeof pattern === \"object\" || pattern === null) {\n\t\t\t\tthis.generators = pattern?pattern:[];\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet last: NameGenerator;\n\t\t\tlet stack: Group[] = [];\n\t\t\tlet top: Group = new GroupSymbol();\n\n\t\t\tlet patternStr = pattern;\n\n\t\t\tfor (let i = 0; i < patternStr.length; i++) {\n\t\t\t\tconst chr = patternStr[i];\n\t\t\t\tswitch (chr) {\n\t\t\t\t\tcase '<':\n\t\t\t\t\t\tstack.push(top);\n\t\t\t\t\t\ttop = new GroupSymbol();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '(':\n\t\t\t\t\t\tstack.push(top);\n\t\t\t\t\t\ttop = new GroupLiteral();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '>':\n\t\t\t\t\tcase ')':\n\t\t\t\t\t\tif (stack.length === 0) {\n\t\t\t\t\t\t\tthrow new Error('Unbalanced brackets');\n\t\t\t\t\t\t} else if (chr === '>' && top.type !== GroupTypes.symbol) {\n\t\t\t\t\t\t\tthrow new Error('Unexpected \\'>\\' in pattern');\n\t\t\t\t\t\t} else if (chr === ')' && top.type !== GroupTypes.literal) {\n\t\t\t\t\t\t\tthrow new Error('Unexpected \\')\\' in pattern');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlast = top.produce();\n\t\t\t\t\t\ttop = stack.pop()!;\n\t\t\t\t\t\ttop.add(last);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '|':\n\t\t\t\t\t\ttop.split();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '!':\n\t\t\t\t\t\tif (top.type === GroupTypes.symbol) {\n\t\t\t\t\t\t\ttop.wrap(Wrappers.capitalizer);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttop.add(chr);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '~':\n\t\t\t\t\t\tif (top.type === GroupTypes.symbol) {\n\t\t\t\t\t\t\ttop.wrap(Wrappers.reverser);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttop.add(chr);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttop.add(chr);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (stack.length !== 0) {\n\t\t\t\tthrow new Error('Missing closing brackets');\n\t\t\t}\n\n\t\t\tlet g: NameGenerator = top.produce();\n\t\t\tif (collapse_triples) {\n\t\t\t\tg = new Collapser(g);\n\t\t\t}\n\t\t\tthis.add(g);\n\t\t}\n\n\t\tpublic combinations(): number {\n\t\t\tlet total = 1;\n\t\t\tthis.generators.forEach((g, i, a) => {\n\t\t\t\ttotal *= g.combinations();\n\t\t\t});\n\t\t\treturn total;\n\t\t}\n\n\t\tpublic min(): number {\n\t\t\tlet final = 0;\n\t\t\tthis.generators.forEach((g, i, a) => {\n\t\t\t\tfinal += g.min();\n\t\t\t});\n\t\t\treturn final;\n\t\t}\n\n\t\tpublic max(): number {\n\t\t\tlet final = 0;\n\t\t\tthis.generators.forEach((g, i, a) => {\n\t\t\t\tfinal += g.max();\n\t\t\t});\n\t\t\treturn final;\n\t\t}\n\n\t\tpublic toString(rand:number): string {\n\t\t\tlet str = '';\n\t\t\tthis.generators.forEach((g, i, a) => {\n\t\t\t\tstr += g.toString(rand);\n\t\t\t});\n\t\t\treturn str;\n\t\t}\n\n\t\tpublic add(g: NameGenerator): void {\n\t\t\tthis.generators.push(g);\n\t\t}\n\t}\n\n\tclass Random extends NameGenerator {\n\t\t// eslint-disable-next-line\n\t\tconstructor(generators: NameGenerator[]) {\n\t\t\tsuper(generators);\n\t\t}\n\n\t\tpublic combinations(): number {\n\t\t\tlet total = 0;\n\t\t\tthis.generators.forEach((g, i, a) => {\n\t\t\t\ttotal += g.combinations();\n\t\t\t});\n\t\t\treturn total ? total : 1;\n\t\t}\n\n\t\tpublic min(): number {\n\t\t\tlet final = -1;\n\t\t\tthis.generators.forEach((g, i, a) => {\n\t\t\t\tlet curr = g.min();\n\t\t\t\tif (curr < final) {\n\t\t\t\t\tfinal = curr;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn final;\n\t\t}\n\n\t\tpublic max(): number {\n\t\t\tlet final = 0;\n\t\t\tthis.generators.forEach((g, i, a) => {\n\t\t\t\tlet curr = g.max();\n\t\t\t\tif (curr > final) {\n\t\t\t\t\tfinal = curr;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn final;\n\t\t}\n\n\t\tpublic toString(rand:number): string {\n\t\t\tif (!this.generators) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tlet rnd = Math.floor(rand * this.generators.length);\n\t\t\treturn this.generators[rnd].toString(rand);\n\t\t}\n\t}\n\n\tclass Sequence extends NameGenerator {\n\t\t// eslint-disable-next-line\n\t\tconstructor(generators: NameGenerator[]) {\n\t\t\tsuper(generators);\n\t\t}\n\t}\n\n\tclass Literal extends NameGenerator {\n\t\tprivate value: string;\n\t\tconstructor(value: string) {\n\t\t\tsuper();\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tpublic combinations(): number {\n\t\t\treturn 1;\n\t\t}\n\n\t\tpublic min(): number {\n\t\t\treturn this.value.length;\n\t\t}\n\n\t\tpublic max(): number {\n\t\t\treturn this.value.length;\n\t\t}\n\n\t\tpublic toString(): string {\n\t\t\treturn this.value;\n\t\t}\n\t}\n\n\tclass Reverser extends NameGenerator {\n\t\tconstructor(generator: NameGenerator) {\n\t\t\tsuper([generator]);\n\t\t}\n\n\t\tpublic toString(rand:number): string {\n\t\t\treturn super.toString(rand).split('').reverse().join('');\n\t\t}\n\t}\n\n\tclass Capitalizer extends NameGenerator {\n\t\tconstructor(generator: NameGenerator) {\n\t\t\tsuper([generator]);\n\t\t}\n\n\t\tpublic toString(rand:number): string {\n\t\t\tlet str = super.toString(rand);\n\t\t\tif (!str) return '';\n\t\t\treturn str[0].toUpperCase() + str.substr(1).toLowerCase();\n\t\t}\n\t}\n\n\tclass Collapser extends NameGenerator {\n\t\tconstructor(generator: NameGenerator) {\n\t\t\tsuper([generator]);\n\t\t}\n\n\t\tpublic toString(rand:number): string {\n\t\t\tlet str = super.toString(rand);\n\t\t\tlet out = '';\n\t\t\tlet cnt = 0;\n\t\t\tlet pch = '';\n\t\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\t\tconst chr = str[i];\n\t\t\t\tif (chr === pch) {\n\t\t\t\t\tcnt++;\n\t\t\t\t} else {\n\t\t\t\t\tcnt = 0;\n\t\t\t\t}\n\t\t\t\tlet mch = 2;\n\t\t\t\tswitch (chr) {\n\t\t\t\t\tcase 'a':\n\t\t\t\t\tcase 'h':\n\t\t\t\t\tcase 'i':\n\t\t\t\t\tcase 'j':\n\t\t\t\t\tcase 'q':\n\t\t\t\t\tcase 'u':\n\t\t\t\t\tcase 'v':\n\t\t\t\t\tcase 'w':\n\t\t\t\t\tcase 'x':\n\t\t\t\t\tcase 'y':\n\t\t\t\t\t\tmch = 1;\n\t\t\t\t}\n\t\t\t\tif (cnt < mch) {\n\t\t\t\t\tout += chr;\n\t\t\t\t}\n\t\t\t\tpch = chr;\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t}\n}\n\nexport default NameGen;","import { AnyAction } from \"@reduxjs/toolkit\";\nimport { ITreeLinkRelation } from \"../../types/interfaces/ITreeLinkRelation\";\n\nexport enum TreeActionTypes {\n    CREATE_NODE,\n    REMOVE_NODE,\n    CREATE_LINK,\n    REMOVE_LINK\n}\n\nexport interface ITreeRemoveLinkAction extends AnyAction{\n    type: TreeActionTypes.REMOVE_LINK;\n    payload?: any;\n}\nexport interface ITreeRemoveNodeAction extends AnyAction{\n    type: TreeActionTypes.REMOVE_NODE;\n    payload?: Number;\n}\nexport interface ITreeCreateLinkAction extends AnyAction{\n    type: TreeActionTypes.CREATE_LINK;\n    payload?: any;\n}\nexport interface ITreeCreateNodeAction extends AnyAction{\n    type: TreeActionTypes.CREATE_NODE;\n    payload?: ITreeLinkRelation;\n}\n\nexport type ITreeAction = ITreeRemoveLinkAction | ITreeRemoveNodeAction | ITreeCreateLinkAction | ITreeCreateNodeAction\n\n\n","export default class Id{\n    dynastyid   :number;\n    characterid :number;\n    constructor(dynastyid:number,characterid?:number){\n        if(characterid){\n            this.dynastyid = dynastyid;\n            this.characterid = characterid;\n            return;\n        }\n        this.dynastyid = Math.floor(dynastyid / 100000);\n        this.characterid = dynastyid % 100000;\n    }\n    public valueOf(){\n        return this.dynastyid * 100000 + this.characterid\n    }\n}","import IPerson from '../types/interfaces/IPerson';\nimport TimelineDate from '../types/TimelineDate';\nimport NameGen from './namegen'\nimport Id from \"../types/Id\"\ntype relationType = \"merried\" | \"child\";\n\n \n\nclass CharactersArray{\n    dynastyid                   :number;\n    memberCount                 :number;\n    main                        :Map<Id,IPerson>;\n    secondary                   :Map<Id,IPerson>;\n    constructor(dynastyid:number){\n        this.dynastyid = dynastyid\n        this.memberCount = 0;\n        this.main      = new Map<Id,IPerson>();\n        this.secondary = new Map<Id,IPerson>();\n    }\n    get all(){\n        return [...this.main.values(),...this.secondary.values()]\n    }\n    add(character: IPerson){\n        if(character.id.dynastyid === this.dynastyid) this.memberCount++;\n        this.update(character)\n    }\n    update(character: IPerson){\n        if(character.id.dynastyid === this.dynastyid) return this.main.set(character.id,character)\n        return this.secondary.set(character.id,character)\n    }\n    find(id:Id){\n        if(id.dynastyid === this.dynastyid) return this.main.get(id)\n        return this.secondary.get(id)\n    }\n    delete(id:Id){\n        if(id.dynastyid === this.dynastyid) return this.main.delete(id)\n        return this.secondary.delete(id)\n    }\n    clear(){\n        this.main      = new Map<Id,IPerson>();\n        this.secondary = new Map<Id,IPerson>();\n    }\n\n}\ninterface IGeneratorParams{\n    DYNASTY_NAME                :string | undefined,\n    AVRAGE_FIRTILITY_AGE        :number,\n    AVRAGE_LIFESPAN             :number,\n    YEAR_DIFERENCE_LIMIT        :number,\n    LIVESPAN_DEFFERENCE_KOEF    :number,\n    SECANDARY_DYNASTIES_LIMIT   :number,\n    MAX_RANDOM_NUM              :number,\n    DEBUG                       :number\n}\nconst DEFAULT_PARAMS = {\n    DYNASTY_NAME:undefined,\n    AVRAGE_FIRTILITY_AGE        :18,\n    AVRAGE_LIFESPAN             :60,\n    YEAR_DIFERENCE_LIMIT        :6,\n    LIVESPAN_DEFFERENCE_KOEF    :0.5,\n    SECANDARY_DYNASTIES_LIMIT   :2,\n    MAX_RANDOM_NUM              :1447649678,\n    DEBUG                       :0\n}\ninterface IGenData{\n    idCounter                   :number;\n    nameGen                     :NameGen.NameGenerator;\n    dynNameGen                  :NameGen.NameGenerator;\n    dynasty                     :string;\n    options                     :IGeneratorParams;\n    foundingDate                :TimelineDate;\n    dynastys                    :Array<string>;\n    characters                  :CharactersArray;\n    links                       :Array<{from:Id,to:Id,type:relationType}>;\n\n    _pseudorandom               :()=>number;\n}\nclass Generator implements IGenData{\n    idCounter                   :number  = 0;\n    nameGen                     !:NameGen.NameGenerator;\n    dynNameGen                  !:NameGen.NameGenerator;\n    dynasty                     !:string;\n    options                     !:IGeneratorParams;\n    foundingDate                !:TimelineDate;\n    dynastys                    !:Array<string>;\n    characters                  !:CharactersArray;\n    links                       !:Array<{from:Id,to:Id,type:relationType}>;\n\n    _pseudorandom               !:()=>number;\n\n    constructor(nameTemplate:string | IGenData,seed:number = Math.random(),options: IGeneratorParams = DEFAULT_PARAMS,foundingDate:TimelineDate = new TimelineDate(0,0,0,0,0,0)) {\n        if(typeof nameTemplate === \"string\") {\n            this.nameGen            = new NameGen.NameGenerator(nameTemplate);\n            this.dynNameGen         = new NameGen.NameGenerator(nameTemplate);\n            this.dynastys           = new Array<string>();\n            this.characters         = new CharactersArray(0);\n            this.links              = new Array<{from:Id,to:Id,type:relationType}>();\n            this.options            = options;\n            this.foundingDate       = foundingDate;\n            \n            this._pseudorandom = function() {\n                var t = seed += 0x6D2B79F5;\n                // eslint-disable-next-line\n                t = Math.imul(t ^ t >>> 15, t | 1);\n                // eslint-disable-next-line\n                t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n                // eslint-disable-next-line\n                const ret = ((t ^ t >>> 14) >>> 0) / 4294967296;\n                this.options.DEBUG >= 3 && console.log(ret);\n                return ret;\n            }\n            this.dynasty = this.options.DYNASTY_NAME?this.options.DYNASTY_NAME:this.dynNameGen.toString(this._pseudorandom());  \n            return      \n        } \n        Object.assign(this,nameTemplate);\n    }\n    private IPersonFactory(name:string, surname:string, patronymic:string, birth:TimelineDate, death:null | TimelineDate, _awaitedCildCount: number,isMale:boolean = Boolean(this._randint() % 2)):IPerson{\n        const id = this.dynasty === surname?0:this.dynastys.findIndex(v=>v === surname)\n        return {\n            name,surname,patronymic,birth,death,\n            _awaitedCildCount,isMale,\n            id:new Id(id,this.idCounter++),\n            childCount:0\n        }\n    }\n    private _createChildTimelineDate(parentBirth: TimelineDate[]):TimelineDate{\n        const youngDate = parentBirth.reduce((prev,curr) => curr.year >= prev.year?curr:prev)\n        const td:TimelineDate = Object.assign({},youngDate)\n        \n        td.year += this._randint() % (this.options.AVRAGE_LIFESPAN - this.options.AVRAGE_FIRTILITY_AGE) + this.options.AVRAGE_FIRTILITY_AGE; \n        td.day   = this._randint() % 31;\n        td.month = this._randint() % 12;\n        return td\n    }\n    private _createPeerTimlineDate(peerBirth: TimelineDate):TimelineDate{\n        const td:TimelineDate = Object.assign({},peerBirth)\n        \n        td.year += this._randint() % (this.options.YEAR_DIFERENCE_LIMIT * 2) - this.options.YEAR_DIFERENCE_LIMIT; \n        td.day = this._randint()   % 31;\n        td.month = this._randint() % 12;\n        return td;\n    }\n    private _createDeathTimelineDate(character: IPerson):TimelineDate{\n        if(!character._awaitedCildCount){\n            const td = Object.assign({},character.birth)\n        \n            td.year += this._randint() % this.options.AVRAGE_LIFESPAN; \n            td.day   = this._randint() % 31;\n            td.month = this._randint() % 12;\n            return td;\n        }\n        const td = Object.assign({},character.birth)\n\n        td.year += this._randint() % (this.options.AVRAGE_LIFESPAN * (1 + this.options.LIVESPAN_DEFFERENCE_KOEF) - this.options.AVRAGE_FIRTILITY_AGE ) + this.options.AVRAGE_FIRTILITY_AGE; \n        td.day   = this._randint() % 31;\n        td.month = this._randint() % 12;\n\n        return td;\n    }\n    private _randint(){\n        return Math.floor(this._pseudorandom() * this.options.MAX_RANDOM_NUM);\n    }\n    private _randomFromArray<T=any>(array:Array<T>){\n        return array[Math.floor(this._pseudorandom() * array.length)];\n    }\n    private _generateDynasty() {\n        const ret = this.dynNameGen.toString(this._pseudorandom())\n        this.dynastys.push(ret);\n        return ret;\n    }\n    private _getSecondaryDynasty(){\n        if(!~this.options.SECANDARY_DYNASTIES_LIMIT) return this._generateDynasty()\n        const idx = this._randint() % this.options.SECANDARY_DYNASTIES_LIMIT\n        if(idx >= this.dynastys.length) {\n            const dyn = this._generateDynasty()\n            this.dynastys.push(dyn)\n            return dyn\n        }\n        return this.dynastys[idx]\n    }\n    private _findMerried(id:Id){\n        return this.links.find((value)=>(value.from.valueOf() === id.valueOf()  || value.to.valueOf() === id.valueOf()) && value.type === \"merried\")\n    }\n    private _logChararacterData(character:IPerson,role:\"founder\" | \"wifu\" | \"child\",...args:IPerson[]){\n        let prefix = \"UNKNOWN\"\n        switch (role) {\n            case \"child\"  : prefix = `${character.isMale?\"Son\":\"Daughter\"} of ${args[0].name} and ${args[1].name}`;break;\n            case \"wifu\"   : prefix = `${character.isMale?\"Hasband\":\"Wife\"} of ${args[0].name}`;break;\n            case \"founder\": prefix = `Founder`;break;\n            default       : break;\n        }\n        console.log(`${character.name} ${character.surname} al ${character.patronymic}.\\n${prefix}.\\nBirth in ${character.birth.year} year\\n${character.death?`Pass off in ${character.death.year} year`:\"Until our time\"}\\n`);\n    }\n    /**\n     * produce\n     */\n    public produce():IPerson {\n        if(!this.characters.memberCount){\n            const name       = this.nameGen.toString(this._pseudorandom());\n            const surname    = this.dynasty;\n            const patronymic = this.nameGen.toString(this._pseudorandom())\n            const founder = this.IPersonFactory(name,surname, patronymic, this.foundingDate, null,this._randint() % 3 + 1)\n            founder.death = this._createDeathTimelineDate(founder);\n            this.characters.add(founder);\n            this.options.DEBUG && this._logChararacterData(founder,\"founder\");\n            this.options.DEBUG>=2 && console.log(founder.birth);\n            return founder;\n        }\n        const person = this._randomFromArray([...this.characters.main.values()]);\n        const marriege = this._findMerried(person.id)\n        if(!marriege){\n            const name       = this.nameGen.toString(this._pseudorandom());\n            const surname    = this._getSecondaryDynasty();\n            const patronymic = this.nameGen.toString(this._pseudorandom())\n            const wifu = this.IPersonFactory(name,surname, patronymic,this._createPeerTimlineDate(person.birth),null,0,!person.isMale)\n            wifu.death = this._createDeathTimelineDate(wifu);\n            this.characters.add(wifu);\n            this.links.push({from:person.id,to:wifu.id,type:\"merried\"});\n            this.options.DEBUG && this._logChararacterData(wifu,\"wifu\",person);\n            this.options.DEBUG>=2 && console.log(wifu.birth);\n            return wifu;\n        }\n        //TODO Check all characters can have children\n        const wifu    = this.characters.find(marriege.to)!;\n        const name    = this.nameGen.toString(this._pseudorandom());\n        const surname = this.dynasty;\n        const patronymic = person.name;\n        const child = this.IPersonFactory(name,surname, patronymic,this._createChildTimelineDate([person.birth,wifu.birth]),null,this._randint() % 3 + 1)\n\n        child.death = this._createDeathTimelineDate(child);\n        this.characters.add(child);\n\n        this.links.push({from:person.id,to:child.id,type:\"child\"});\n        this.links.push({from:marriege.to,to:child.id,type:\"child\"});\n\n        this.options.DEBUG    && this._logChararacterData(child,\"child\",person,wifu);\n        this.options.DEBUG>=2 && console.log(child.birth);\n\n        return child;\n    }\n    get data():IGenData{\n        return {...this}\n    }\n    /**\n     * generateCharacters     \n     */\n    public generateDynasty(count:number) {\n        for (let index = 0; index < count - 1; index++)\n            this.produce()\n        return this.characters.all\n    }\n    public updateCharacter(char: IPerson){\n        this.characters.update(char)\n    }\n    public addCharacter(char: IPerson){\n        this.characters.add(char)\n    }\n    public deleteCharacter(id:Id){\n        this.characters.delete(id);\n    }\n\n}\n\nexport default Generator;","import { Reducer   } from \"@reduxjs/toolkit\";\nimport Generator from \"../../generator/generate\";\nimport IPerson from \"../../types/interfaces/IPerson\";\nimport ICharacterAction from \"../actions/characterActions\";\n\ntype CharacterState = Array<IPerson>;\nconst gena = new Generator(\"VV\",Math.random()*10000000)\nconst charDefaultState: CharacterState = gena.characters.all;\n\nexport const characterReducer: Reducer<CharacterState | undefined,ICharacterAction> = (state=charDefaultState,action) => {\n    switch (action.type) {\n        case \"GenearateDynasty\":\n            gena.characters.clear()\n            gena.generateDynasty(30)\n            return gena.characters.all\n        case \"CreateNewCharacter\":\n            if(action.payload) {\n                gena.characters.add(action.payload)\n                return gena.characters.all\n            }\n            gena.generateDynasty(1);\n            return gena.characters.all\n        case \"DeleteCharacter\":\n            gena.characters.delete(action.payload);\n            return gena.characters.all\n        case \"UpdateCharacter\":\n            gena.characters.add(action.payload)\n            return gena.characters.all\n        default:\n            return state\n    }\n}","import { Reducer   } from \"@reduxjs/toolkit\";\nimport { ITreeNode } from \"../../types/interfaces/ITreeNode\";\nimport { ITreeAction, TreeActionTypes } from \"../actions/treeAction\";\n\nexport interface ITreeState {\n    node: ITreeNode;\n}\n/*\n\n*/\nconst treeDefaultState: ITreeState = {\n    node: {relations:[],type:\"root\"}\n}\n\n\n\nexport const treeReducer: Reducer<ITreeState | undefined,ITreeAction> = (state = treeDefaultState,action) => {\n    switch (action.type) {\n        case TreeActionTypes.CREATE_LINK: return state; //return {...state}\n        case TreeActionTypes.CREATE_NODE:\n            if(!action.payload) return state; \n            return {...state, node: {...state.node,relations:[...state.node.relations,action.payload]}}\n        case TreeActionTypes.REMOVE_LINK: return state;\n        case TreeActionTypes.REMOVE_NODE: return state; //return {...state, nodes: [...state.nodes.filter(val => val == action.payload)]}\n        default                         : return state;\n    } \n}","import { configureStore } from '@reduxjs/toolkit'\nimport { characterReducer } from './reducers/characterReducer';\nimport { treeReducer } from './reducers/treeReducer';\n\n\nexport const store = configureStore({\n    reducer:{\n        tree:treeReducer,\n        characters:characterReducer\n    }\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch","import React, { useEffect, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\nimport { TreeActionTypes } from \"../../storage/actions/treeAction\";\nimport { ITreeNode } from \"../../types/interfaces/ITreeNode\";\nexport interface ITreeDrawerProps {\n    width?:number;\n    height?:number;\n};\n/*\nconst dateToYcord = (date:number,start:number,scale:number) =>{\n    return (date - start) * scale;\n}\n\n\nconst drawLine = (from:Point | null,to:Point | null,type:string,ctx: CanvasRenderingContext2D) => {\n    if (! to || !from) return;\n    ctx.beginPath()\n    ctx.moveTo(...from);\n    ctx.lineWidth = 3;\n    ctx.lineTo(...to);\n    ctx.strokeStyle = '#ffffff'\n    ctx.stroke()\n    console.log(from,to);\n    \n}\n*/\n\nconst TreeDrawer: React.FC<ITreeDrawerProps> = (props) => {\n    const node    = useTypedSelector(state => state.tree?.node);\n    const dispach = useDispatch();\n    \n    //const act : ITreeAction[] = []\n    const canvasRef = useRef(null);\n    useEffect(()=>{\n        const canvas : HTMLCanvasElement = canvasRef.current!;\n        const ctx    = canvas.getContext('2d')!;\n        \n        //clear backgraund\n        ctx.fillStyle = \"#1e1e1e\"\n        ctx.fillRect(0,0,ctx.canvas.width,ctx.canvas.height)\n        \n        if (!node) return;\n\n        const drawNode = (node: ITreeNode, x: number, ctx: CanvasRenderingContext2D) => {\n            ctx.fillStyle = \"#0f0\"\n            if(node.type !== \"root\") ctx.fillRect(x,node.birth_date - 6,12,12);\n            node.relations.forEach((value)=>drawNode(value.object,x,ctx));\n            \n        }\n        \n        drawNode(node,10,ctx);\n\n    },[node])\n    return (\n        <div>\n            <canvas ref={canvasRef} width={props.width} height={props.height} />\n            <button onClick={()=>{\n                dispach({\n                    type:TreeActionTypes.CREATE_NODE,payload:{\n                        object:{\n                            birth_date:Math.round(Math.random()*Number(props.width)),\n                            relations:[],\n                            type:\"character\"\n                        },\n                        type:\"\",\n                    }})\n            }}></button>\n        </div>\n    );\n}\n\nexport default TreeDrawer;","import React from \"react\";\nimport TreeDrawer from \"../TreeDrawer/TreeDrawer\";\nexport interface ITreeEditorProps {\n    width?:number;\n    height?:number;\n};\n\nconst TreeEditor: React.FC<ITreeEditorProps> = (props) => {\n    return (\n        <div><TreeDrawer {...props}></TreeDrawer></div>\n    );\n}\n\nexport default TreeEditor;","import { Provider } from \"react-redux\";\nimport Characteristics from \"../Characteristics/Characteristics\";\nimport { store } from \"../../storage/store\";\nimport TreeEditor from \"../TreeEditor/TreeEditor\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <TreeEditor width={600} height={600} />\n        <Characteristics />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}